<application>
  <component name="AppStorage">
    <histories>
      <item value="All literal strings and string-valued constant expressions are * interned. String literals are defined in section 3.10.5 of the" />
      <item value="Returns a canonical representation for the string object.      * &lt;p&gt;      * A pool of strings, initially empty, is maintained privately by the      * class {@code String}.      * &lt;p&gt;      * When the intern method is invoked, if the pool already contains a      * string equal to this {@code String} object as determined by      * the {@link #equals(Object)} method, then the string from the pool is      * returned. Otherwise, this {@code String} object is added to the      * pool and a reference to this {@code String} object is returned.      * &lt;p&gt;      * It follows that for any two strings {@code s} and {@code t},      * {@code s.intern() == t.intern()} is {@code true}      * if and only if {@code s.equals(t)} is {@code true}.      * &lt;p&gt;      * All literal strings and string-valued constant expressions are      * interned. String literals are defined in section 3.10.5 of the      * &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.      *      * @return  a string that has the same contents as this string, but is      *          guaranteed to be from a pool of unique strings." />
      <item value="radix-conversion" />
      <item value="The constant value of this field is the smallest value of type" />
      <item value="radix" />
      <item value="The minimum radix available for conversion to and from strings. * The constant value of this field is the smallest value permitted * for the radix argument in radix-conversion methods such as the * {@code digit} method, the {@code forDigit} method, and the * {@code toString} method of class {@code Integer}." />
      <item value="interoperability" />
      <item value="concatenation" />
      <item value="Because String objects are immutable they can be shared." />
      <item value="is equivalent to:" />
      <item value="mutable" />
      <item value="Strings are constant" />
      <item value="trings are constant" />
      <item value="the array by which the list will be backed" />
      <item value="iterator" />
      <item value="Note that &lt;tt&gt;toArray(new Object[0])&lt;/tt&gt; is identical in function to      * &lt;tt&gt;toArray()&lt;/tt&gt;." />
      <item value="The returned array will be &quot;safe&quot; in that no references to it are      * maintained by this list.  (In other words, this method must allocate      * a new array).  The caller is thus free to modify the returned array." />
      <item value="Changes to      * the returned list &quot;write through&quot; to the array" />
      <item value="backed by the specified array" />
      <item value="impose" />
      <item value="imposr" />
      <item value="修复一些bug" />
      <item value="支付金额" />
      <item value="项目改造" />
      <item value="改了点东西" />
      <item value="请求时间" />
      <item value="负责人" />
      <item value="principal" />
      <item value="responsible" />
      <item value="imposes" />
      <item value="This interface imposes a total ordering on the objects of each class that * implements it. This ordering is referred to as the class's &lt;i&gt;natural * ordering&lt;/i&gt;, and the class's &lt;tt&gt;compareTo&lt;/tt&gt; method is referred to as * its &lt;i&gt;natural comparison method&lt;/i&gt;.&lt;p&gt;" />
      <item value="accumulates " />
      <item value="A function that accepts two partial results and merges them.  The      * combiner function may fold state from one argument into the other and      * return that, or may return a new result container." />
      <item value="A function that folds a value into a mutable result container." />
      <item value="图床" />
      <item value="collection" />
      <item value="collector" />
      <item value="Represents an operation that accepts a single input argument and returns no  * result. Unlike most other functional interfaces, {@code Consumer} is expected  * to operate via side-effects.  *" />
      <item value="operate via side-effects." />
      <item value="* Represents a supplier of results.  *  * &lt;p&gt;There is no requirement that a new or distinct result be returned each  * time the supplier is invoked.  *  * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;  * whose functional method is {@link #get()}.  *  * @param &lt;T&gt; the type of results supplied by this supplier  *" />
      <item value="Represents a supplier of results." />
      <item value="&lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values      *     {@code x} and {@code y}, multiple invocations of      *     {@code x.equals(y)} consistently return {@code true}      *     or consistently return {@code false}, provided no      *     information used in {@code equals} comparisons on the      *     objects is modified." />
      <item value="reflexive" />
      <item value="Returns a predicate that tests if two arguments are equal according      * to {@link Objects#equals(Object, Object)}." />
      <item value=" Returns a predicate that represents the logical negation of this      * predicate." />
      <item value="Returns a composed predicate that represents a short-circuiting logical      * AND of this predicate and another.  When evaluating the composed      * predicate, if this predicate is {@code false}, then the {@code other}      * predicate is not evaluated." />
      <item value="compose" />
      <item value="composed" />
      <item value=" * Evaluates this predicate on the given argument." />
      <item value="predicate" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="24" />
        <entry key="ENGLISH" value="25" />
      </map>
    </option>
  </component>
</application>